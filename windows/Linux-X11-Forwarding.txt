## X11 forwarding needs to be enabled on both the <Client Side> and the <Server Side>.
1. Your client must be set up to forward X11.
2. Your server must be set up to allow X11 forwarding.
3. Your server must be able to set up X11 authentication.

[###On the Client Side###]
The -X (capital X) option to ssh enables X11 forwarding, and you can make this the default (for all connections or for a specific conection) with ForwardX11 yes in ~/.ssh/config.

1) At user home ssh folder "~/.ssh/config" file have these lines;
# ~/.ssh/config
Host *
  ForwardAgent yes
  ForwardX11 yes
  ForwardX11Trusted yes
  
2) You need to have X server installed (e.g. macOS: XQuartz; Windows: Xming).

3) Then to do X11 forwarding using SSH, you need to add (-X) to your ssh command. In case for untrusted X11, then try (-Y) flag instead (if you trust the host);
$ ssh -v -X -Y user@hostname

4) To have verbose parameter for ssh, add (-v), check for any warnings as error throw below;
debug1: No xauth program.
Warning: untrusted X11 forwarding setup failed: xauth key data not generated

Make sure you have installed "xauth" on your Serer Side. If it is not installed, run the following command as root or sudo user:
$ sudo apt install xauth

In Ubuntu later there's no longer a ~/.Xauthority file. Instead you'll find the equivalent in
   $ /var/run/user/1000/gdm/Xauthority
which will be re-created with new random characters on every session start. You can get its name via the $XAUTHORITY environment variable.

If you need a ~/.Xauthority file to be present, I guess you can simply create a symbolic link to $AUTHORITY on every session start:
   1. Open System > Preferences > Startup Applications
   2. Click on Add :
        - Name:    Xauthority
        - Command: /bin/bash -c 'ln -s -f "$XAUTHORITY" ~/.Xauthority'
        - Comment: Creates a symbolic link from ~/.Xauthority to $XAUTHORITY
      and add the entry by clicking on Add.
   3. Now every time you log in, it should create the link to the current authority file.


[###X11 Forwarding thru SSH Tunneling###]
Have 3 hosts A, B & C. Host A can access B through ssh only. Host B can access C. We want to be able to run X11 programs on C and forward display to A. localPort can be any port that you are not already listening to on A, I often use 2222 for simplicity.

1) First, establish a ssh tunnel to host C:22 thru B at host A using localhost with port 2222 (connect to host B and forward [2222] to C:22 through B)
A$ ssh -v -N -L 2222:<host-C>:22 <user>@<host-B>

2) Next, connect to host C from A through this newly-created tunnel using [2222], forwarding X11
A$ ssh -v -X -p 2222 <user>@localhost

3) Now we can run X11 programs on C and have them display on A. (Port localhost:2222 is forwarded to C:22 via B. SSH to C via localhost:2222. Use X as normal)
C$ xclock


[###On the Server Side###]
The xauth program must be installed on the server side. If there are any X11 programs there, it's very likely that xauth will be there. In the unlikely case xauth was installed in a nonstandard location, it can be called through ~/.ssh/rc (on the server!).
To confirm that ssh is forwarding X11, check for a line containing Requesting X11 forwarding in the ssh -v -X output. Note that the server won't reply either way, a security precaution of hiding details from potential attackers.

1) Edit ssh_config as administrator(USE sudo). Inside ssh_config, remove the hash # in the lines ForwardAgent, ForwardX11, ForwardX11Trusted, and set the corresponding arguments to yes.
# /etc/ssh/ssh_config
Host *
    ForwardAgent yes
    ForwardX11 yes
    ForwardX11Trusted yes

2) X11Forwarding yes must specified in /etc/ssh/sshd_config. Note that the default is no forwarding (some distributions turn it on in their default /etc/ssh/sshd_config), and that the user cannot override this setting.
# /etc/ssh/sshd_config
AllowAgentForwarding yes
AllowTcpForwarding yes
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost no

3) Note that you do not need to set any environment variables on the server. "DISPLAY" and "XAUTHORITY" will automatically be set to their proper values. If you run ssh and DISPLAY & XAUTHORITY are not set, it means ssh is not forwarding the X11 connection. Now go to folder ~ or $HOME, append export to your .bashrc file and save it.
$ export XAUTHORITY=$HOME/.Xauthority

4) Then verify that the DISPLAY is not empty by;
$ echo $DISPLAY

5) In case you've warning: No xauth data, you may try to generate a new .Xauthority file;
$ xauth generate :0 . trusted
$ xauth generate $DISPLAY
$ xauth add $(xauth -f $HOME/.Xauthority list | tail -1)
$ xauth list
$ xauth info

[---SSH specific purpose command---]
Removes all keys belonging to hostname from a known_hosts file.
$ ssh-keygen -R <hostname/ipaddr>

Establish ssh connection without updating the known_hosts file.
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no <username>@<hostname>

Establish ssh using only password and bypass the ssh private key.
ssh -o PasswordAuthentication=yes -o PreferredAuthentications=password -o PubkeyAuthentication=no <username>@<hostname>
